name: build-ubuntu-packages
run-name: Build Debian style packages for Ubuntu
on:
  push:
  workflow_call:
    inputs:
      vulkan-sdk:
        required: true
        type: string
        default: '{"repo":"johnzupin/vulkan-sdk","ref":"ubuntu/focal"}'
        description: "A json object that defines repo and ref. Ex) {repo:johnzupin/vulkan-sdk, ref:ubuntu/focal}"
  workflow_dispatch:
    inputs:
      vulkan-sdk:
        required: true
        type: string
        default: '{"repo":"johnzupin/vulkan-sdk","ref":"ubuntu/focal"}'
        description: "A json object that defines repo and ref. Ex) {repo:johnzupin/vulkan-sdk, ref:ubuntu/focal}"

jobs:
  get-vulkan-sdk-deps:
    runs-on: ubuntu-latest
    outputs:
      spirv-headers-repo: ${{ steps.deps-refs.outputs.SPV_HEADERS_REPO }}
      spirv-headers-ref: ${{ steps.deps-refs.outputs.SPV_HEADERS_REF }}
      spirv-tools-repo: ${{ steps.deps-refs.outputs.SPV_TOOLS_REPO }}
      spirv-tools-ref: ${{ steps.deps-refs.outputs.SPV_TOOLS_REF }}
      glslang-repo: ${{ steps.deps-refs.outputs.GLSLANG_REPO }}
      glslang-ref: ${{ steps.deps-refs.outputs.GLSLANG_REF }}
      vh-repo: ${{ steps.deps-refs.outputs.VH_REPO }}
      vh-ref: ${{ steps.deps-refs.outputs.VH_REF }}
      vl-repo: ${{ steps.deps-refs.outputs.VL_REPO }}
      vl-ref: ${{ steps.deps-refs.outputs.VL_REF }}
      vvl-repo: ${{ steps.deps-refs.outputs.VVL_REPO }}
      vvl-ref: ${{ steps.deps-refs.outputs.VVL_REF }}
      vt-repo: ${{ steps.deps-refs.outputs.VT_REPO }}
      vt-ref: ${{ steps.deps-refs.outputs.VT_REF }}
      rhh-repo: ${{ steps.deps-refs.outputs.RHH_REPO }}
      rhh-ref: ${{ steps.deps-refs.outputs.RHH_REF }}
      vulkan-sdk-repo: ${{ steps.deps-refs.outputs.VULKAN_SDK_REPO }}
      vulkan-sdk-ref: ${{ steps.deps-refs.outputs.VULKAN_SDK_REF }}
    steps:
      # - name: "Inputs have been specified - Set repo/ref variables with specified input"
      #   if: ${{ inputs.vulkan-sdk != '' }}
      #   run: |
      #     echo SPV_HEADERS_REPO="${{ fromJSON(inputs.spirv_headers).repo }}" >> "$GITHUB_ENV"
      #     echo SPV_HEADERS_REF="${{ fromJSON(inputs.spirv_headers).ref }}" >> "$GITHUB_ENV"
      #     echo SPV_TOOLS_REPO="${{ fromJSON(inputs.spirv_tools).repo }}" >> "$GITHUB_ENV"
      #     echo SPV_TOOLS_REF="${{ fromJSON(inputs.spirv_tools).ref }}" >> "$GITHUB_ENV"
      - name: "No inputs specified - Checkout repository to get dependency versions from repository DEPS file" 
        if: ${{ inputs.vulkan-sdk == '' }}
        uses: actions/checkout@v3
      # - name: "No input specified - Parse the DEPS file to get the dependency refs for building package dependencies"
      #   if: ${{ inputs.vulkan-sdk == '' }}
      #   run: |
      #     # WARNING: the spirv-headers repo is hardcoded to johnzupin org, this needs to change to Khronos when /debian gets merged
      #     echo SPV_HEADERS_REPO="johnzupin/SPIRV-Headers" >> "$GITHUB_ENV" 
      #     echo SPV_HEADERS_REF=`grep -m1 'spirv_headers_revision' DEPS | tr -d \ \', | cut -d: -f2` >> "$GITHUB_ENV"
      #     echo SPV_TOOLS_REPO="$GITHUB_REPOSITORY" >> "$GITHUB_ENV"
      #     echo SPV_TOOLS_REF="$GITHUB_REF_NAME" >> "$GITHUB_ENV"
      - id: deps-refs
        run: |
          echo SPV_HEADERS_REPO=`jq -r '.["repositories"]["spirv-headers"]["remotes"]["upstream"]["url"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo SPV_HEADERS_REF=`jq -r '.["repositories"]["spirv-headers"]["build_distros"]["focal"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo SPV_TOOLS_REPO=`jq -r '.["repositories"]["spirv-tools"]["remotes"]["upstream"]["url"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo SPV_TOOLS_REF=`jq -r '.["repositories"]["spirv-tools"]["build_distros"]["focal"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo GLSLANG_REPO=`jq -r '.["repositories"]["glslang"]["remotes"]["upstream"]["url"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo GLSLANG_REF=`jq -r '.["repositories"]["glslang"]["build_distros"]["focal"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo VH_REPO=`jq -r '.["repositories"]["vulkan-headers"]["remotes"]["upstream"]["url"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo VH_REF=`jq -r '.["repositories"]["vulkan-headers"]["build_distros"]["focal"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo VL_REPO=`jq -r '.["repositories"]["vulkan-loader"]["remotes"]["upstream"]["url"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo VL_REF=`jq -r '.["repositories"]["vulkan-loader"]["build_distros"]["focal"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo VVL_REPO=`jq -r '.["repositories"]["vulkan-validationlayers"]["remotes"]["upstream"]["url"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo VVL_REF=`jq -r '.["repositories"]["vulkan-validationlayers"]["build_distros"]["focal"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo VT_REPO=`jq -r '.["repositories"]["vulkan-tools"]["remotes"]["upstream"]["url"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo VT_REF=`jq -r '.["repositories"]["vulkan-tools"]["build_distros"]["focal"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo RHH_REPO=`jq -r '.["repositories"]["robin-hood-hashing"]["remotes"]["upstream"]["url"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo RHH_REF=`jq -r '.["repositories"]["robin-hood-hashing"]["build_distros"]["focal"]' ubuntu.json` >> "$GITHUB_OUTPUT"
          echo VULKAN_SDK_REPO="johnzupin/vulkan-sdk-virtual-package" >> "$GITHUB_OUTPUT"
          echo VULKAN_SDK_REF="ubuntu/focal" >> "$GITHUB_OUTPUT"

  build-spirv-headers-package:
    if: ${{ needs.get-vulkan-sdk-deps.outputs.spirv-headers-repo != '' && needs.get-vulkan-sdk-deps.outputs.spirv-headers-ref != '' }}
    needs: "get-vulkan-sdk-deps"
    uses: johnzupin/SPIRV-Headers/.github/workflows/build-ubuntu-packages.yml@zupin_create_workflow_ubuntu_package
    with:
      spirv_headers: '{"repo":"${{needs.get-vulkan-sdk-deps.outputs.spirv-headers-repo}}","ref":"${{needs.get-vulkan-sdk-deps.outputs.spirv-headers-ref}}"}'

  build-spirv-tools-package:
    needs: [ "get-vulkan-sdk-deps", "build-spirv-headers-package" ]
    if: ${{ needs.build-spirv-headers-package.result == 'success' && needs.get-vulkan-sdk-deps.outputs.spirv-tools-repo != '' && needs.get-vulkan-sdk-deps.outputs.spirv-tools-ref != '' }}
    uses: johnzupin/SPIRV-Tools/.github/workflows/build-ubuntu-packages.yml@zupin_create_workflow_ubuntu_package
    with:
      spirv_tools: '{"repo":"${{needs.get-vulkan-sdk-deps.outputs.spirv-tools-repo}}","ref":"${{needs.get-vulkan-sdk-deps.outputs.spirv-tools-ref}}"}'

  test-something:
    runs-on: ubuntu-latest
    needs: [ "get-vulkan-sdk-deps", "build-spirv-headers-package" ]
    steps:
      - run: echo "DEBUG:${{ toJSON(needs.*.result) }}"


  build-glslang-package:
    needs: [ "get-vulkan-sdk-deps", "build-spirv-headers-package", "build-spirv-tools-package"]
    if: ${{ needs.build-spirv-headers-package.result == 'success' &&  needs.build-spirv-tools-package.result == 'success' || needs.get-vulkan-sdk-deps.outputs.glslang-repo != '' && needs.get-vulkan-sdk-deps.outputs.glslang-ref != '' }}
    uses: johnzupin/glslang/.github/workflows/build-ubuntu-packages.yml@zupin_create_workflow_ubuntu_package
    with:
      glslang: '{"repo":"${{ needs.get-vulkan-sdk-deps.outputs.glslang-repo }}","ref":"${{ needs.get-vulkan-sdk-deps.outputs.glslang-ref }}"}'

  build-robin-hood-hashing-package:
    needs: "get-vulkan-sdk-deps"
    if: ${{ needs.get-vulkan-sdk-deps.outputs.rhh-repo != '' && needs.get-vulkan-sdk-deps.outputs.rhh-ref != '' }}
    uses: johnzupin/robin-hood-hashing/.github/workflows/build-ubuntu-packages.yml@zupin_create_workflow_ubuntu_package
    with:
      rhh: '{"repo":"${{ needs.get-vulkan-sdk-deps.outputs.rhh-repo }}","ref":"${{ needs.get-vulkan-sdk-deps.outputs.rhh-ref }}"}'

  build-vulkan-headers-package:
    needs: "get-vulkan-sdk-deps"
    if: ${{ needs.get-vulkan-sdk-deps.outputs.vh-repo != '' && needs.get-vulkan-sdk-deps.outputs.vh-ref != '' }}
    uses: johnzupin/Vulkan-Headers/.github/workflows/build-ubuntu-packages.yml@zupin_create_workflow_ubuntu_package
    with:
      vh: '{"repo":"${{ needs.get-vulkan-sdk-deps.outputs.vh-repo }}","ref":"${{ needs.get-vulkan-sdk-deps.outputs.vh-ref }}"}'

  build-vulkan-loader-package:
    needs: [ "get-vulkan-sdk-deps", "build-vulkan-headers-package" ]
    if: ${{ needs.build-vulkan-headers-package.result == 'success' && needs.get-vulkan-sdk-deps.outputs.vl-repo != '' && needs.get-vulkan-sdk-deps.outputs.vl-ref != '' }}
    uses: johnzupin/Vulkan-Loader/.github/workflows/build-focal-package.yml@zupin_create_workflow_ubuntu_package
    with:
      vl: '{"repo":"${{ needs.get-vulkan-sdk-deps.outputs.vl-repo }}","ref":"${{ needs.get-vulkan-sdk-deps.outputs.vl-ref }}"}'

  # build-vulkan-validationlayers-package:
  #   needs: [ "get-vulkan-sdk-deps", "build-robin-hood-hashing-package", "build-vulkan-headers-package", "build-vulkan-loader-package" ]
  #   if: ${{ needs.build-robin-hood-hashing-package.result == 'success' && needs.build-vulkan-headers-package.result == 'success' && needs.build-vulkan-loader-package.result == 'success' && needs.get-vulkan-sdk-deps.outputs.vvl-repo != '' && needs.get-vulkan-sdk-deps.outputs.vvl-ref != '' }}
  #   uses: johnzupin/Vulkan-ValidationLayers/.github/workflows/build-ubuntu-packages.yml@zupin_create_workflow_ubuntu_package
  #   with:
  #     vvl: '{"repo":"${{ needs.get-vulkan-sdk-deps.outputs.vvl-repo }}","ref":"${{ needs.get-vulkan-sdk-deps.outputs.vvl-repo }}"}'

  build-vulkan-validationlayers-package:
    needs: [ "get-vulkan-sdk-deps", "build-spirv-headers-package", "build-spirv-tools-package", "build-glslang-package", "build-robin-hood-hashing-package", "build-vulkan-headers-package" ]
    if: ${{ needs.build-spirv-headers-package.result == 'skipped' || needs.build-spirv-tools-package.result == 'skipped' || needs.build-glslang-package.result == 'skipped' || needs.build-robin-hood-hashing-packaging.result == 'skipped' || needs.build-vulkan-headers-package.result == 'skipped' || success() }}
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: "spirv-headers-focal-package"
          path: "/tmp/"
      - uses: actions/download-artifact@v3
        with:
          name: "spirv-tools-focal-package"
          path: "/tmp/"
      - uses: actions/download-artifact@v3
        with:
          name: "glslang-focal-package"
          path: "/tmp/"
      - uses: actions/download-artifact@v3
        with:
          name: "robin-hood-hashing-focal-package"
          path: "/tmp/"
      - uses: actions/download-artifact@v3
        with:
          name: "vulkan-headers-focal-package"
          path: "/tmp/"
      - run: |
          apt-get install -y /tmp/spirv-headers*.deb /tmp/spirv-tools*.deb /tmp/glslang*.deb \
          /tmp/robin-hood-hashing*.deb /tmp/vulkan-headers*.deb
      - run: "apt-get update && apt-get install -y wget gpg"
      - run: "wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null"
      - run: "echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list"
      - run: |
          apt-get update && \
          DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get install -y \
          git build-essential libx11-xcb-dev pkg-config \
          libxkbcommon-dev libwayland-dev libxrandr-dev \
          libegl1-mesa-dev python3-distutils \
          cmake git-buildpackage debhelper
      - uses: actions/checkout@v3
        with:
          repository: "${{ needs.get-vulkan-sdk-deps.outputs.vvl-repo }}"
          ref: "${{ needs.get-vulkan-sdk-deps.outputs.vvl-ref }}"
      - run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - run: gbp buildpackage --git-verbose --git-force-create --git-upstream-tree="branch" --git-ignore-branch --git-upstream-branch="${{ needs.get-vulkan-sdk-deps.outputs.vvl-ref }}" --no-sign
      - uses: actions/upload-artifact@v3
        with:
          name: "vulkan-validationlayers-focal-package"
          path: "${{ runner.workspace }}/vulkan-validation*20.04*amd64.deb"

  build-vulkan-tools-package:
    needs: [ "get-vulkan-sdk-deps", "build-vulkan-headers-package", "build-vulkan-loader-package" ]
    if: ${{ needs.build-vulkan-headers-package.result == 'success' && needs.build-vulkan-loader-package.result == 'success' && needs.get-vulkan-sdk-deps.outputs.vt-repo != '' && needs.get-vulkan-sdk-deps.outputs.vt-ref != '' }}
    uses: johnzupin/Vulkan-Tools/.github/workflows/build-ubuntu-packages.yml@zupin_create_workflow_ubuntu_package
    with:
      vt: '{"repo":"${{ needs.get-vulkan-sdk-deps.outputs.vt-repo }}","ref":"${{ needs.get-vulkan-sdk-deps.outputs.vt-ref }}"}'

  # build-lunarg-vulkan-tools-package:
  #   needs: [ "get-vulkan-sdk-deps", "build-vulkan-headers-package", "build-vulkan-loader-package" ]
  #   if: ${{ needs.build-vulkan-headers-package.result == 'success' && needs.build-vulkan-loader-package.result == 'success' && needs.get-vulkan-sdk-deps.outputs.vt-repo != '' && needs.get-vulkan-sdk-deps.outputs.vt-ref != '' }}
  #   uses: johnzupin/VulkanTools/.github/workflows/build-ubuntu-packages.yml@zupin_create_workflow_ubuntu_package
  #   with:
  #     vt: '{"repo":"${{ needs.get-vulkan-sdk-deps.outputs.vt-repo }}","ref":"${{ needs.get-vulkan-sdk-deps.outputs.vt-ref }}"}'

  # build-shaderc-package:
  #   needs: [ "get-vulkan-sdk-deps", "build-spirv-headers-package", "build-spirv-tools-package", "build-glslang-package" ]
  #   if: ${{ needs.build-spirv-headers-package.result == 'success' || needs.build-spirv-tools-package.result == 'success' || needs.build-glslang-package.result == 'success' && needs.get-vulkan-sdk-deps.outputs.shaderc-repo != '' && needs.get-vulkan-sdk-deps.outputs.shaderc-ref != '' }}
  #   uses: johnzupin/shaderc/.github/workflows/build-ubuntu-packages.yml@zupin_create_workflow_ubuntu_package
  #   with:
  #     shaderc: '{"repo":"${{ needs.get-vulkan-sdk-deps.outputs.shaderc-repo }}","ref":"${{ needs.get-vulkan-sdk-deps.outputs.shaderc-ref }}"}'
      
  build-vulkan-sdk-amd64-focal-package:
    needs: [ "get-vulkan-sdk-deps", "build-spirv-headers-package",  "build-spirv-tools-package", "build-glslang-package", "build-robin-hood-hashing-package", "build-vulkan-headers-package", "build-vulkan-loader-package", "build-vulkan-validationlayers-package", "build-vulkan-tools-package" ]
    if: ${{ needs.build-spirv-headers-package.result == 'success' && needs.build-spirv-tools-package.result == 'success' && needs.build-glslang-package.result == 'success' && needs.build-robin-hood-hashing-package.result == 'success' && needs.build-vulkan-headers-package.result == 'success' && needs.build-vulkan-loader-package.resutl == 'success' && needs.build-vulkan-validationlayers-package.result == 'success' && needs.build-vulkan-tools-package.result == 'success' }}
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: "spirv-headers-focal-package"
          path: "/tmp/"
      - run: echo "DEBUG:${{ toJSON(needs.*.result) }}"
      - run: "apt-get install -y /tmp/spirv-headers*20.04*.deb"
      - run: "apt-get update && apt-get install -y wget gpg"
      - run: "wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null"
      - run: "echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list"
      - run: |
          apt-get update && \
          DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get install -y \
          wget git cmake build-essential git-buildpackage python3 debhelper
      - uses: actions/checkout@v3
        with:
          repository: "${{needs.get-vulkan-sdk-ref.outputs.vulkan-sdk-repo}}"
          ref: "${{needs.get-vulkan-sdk-ref.outputs.vulkan-sdk-ref}}"
      - run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - run: "gbp buildpackage --git-verbose --git-force-create --git-upstream-tree=branch --git-ignore-branch --git-upstream-branch=${{needs.get-vulkan-sdk-ref.outputs.vulkan-sdk-ref}} --no-sign"
      - run: "ls -l $RUNNER_WORKSPACE"
      - uses: actions/upload-artifact@v3
        with:
          name: "spirv-tools-focal-package"
          path: "${{ runner.workspace }}/vulkan-sdk*20.04*amd64.deb"
